<!DOCTYPE html>
<html>
<head>
  <title>Edit <%= @file.file_identifier %></title>
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
  <style>
    #code-editor {
      height: 500px;
      border: 1px solid #ccc;
    }
    #output {
      height: 200px;
      border: 1px solid #ccc;
      margin-top: 20px;
      padding: 10px;
      background-color: #f7f7f7;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <h1>Edit <%= @file.file_identifier %></h1>

  <div>
    <button id="save-file" class="btn btn-primary">Save File</button>
    <button id="run-code" class="btn btn-secondary">Run Code</button>
  </div>

  <%= form_for [@project, @file], url: update_file_project_path(@project, file_id: @file.id), method: :patch, html: { id: 'edit-file-form' } do |f| %>
    <%= f.hidden_field :file, id: 'file-content' %>
  <% end %>

  <div id="code-editor" data-content="<%= json_escape(@file_content) %>" style="height:500px; border:1px solid grey;"></div>

  <div id="output"></div>

  <%= link_to 'Back to Project', project_path(@project), class: "btn btn-primary" %>

  <!-- Load Monaco Editor from CDN -->
  <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.30.0/min/vs/loader.js"></script>
  <script>
    (function() {
      let monacoEditor;

      function initializeMonacoEditor() {
        console.log('Initializing Monaco Editor');
        const editorElement = document.getElementById('code-editor');
        if (editorElement && !monacoEditor) {
          const content = editorElement.dataset.content.replace(/\\n/g, '\n');
          monacoEditor = monaco.editor.create(editorElement, {
            value: content,
            language: 'python',
            theme: 'vs-dark'
          });
          console.log('Monaco Editor initialized');
        } else if (!editorElement) {
          console.error('code-editor element not found');
        } else {
          console.log('Monaco Editor already initialized');
        }
      }

      function disposeMonacoEditor() {
        console.log('Disposing Monaco Editor');
        if (monacoEditor) {
          monacoEditor.dispose();
          monacoEditor = null;
          console.log('Monaco Editor disposed');
        }
      }

      function loadMonacoEditor() {
        if (typeof window.require !== 'undefined') {
          if (!window.require.monacoConfigured) {
            window.require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.30.0/min/vs' }});
            window.require.monacoConfigured = true;
          }
          window.require(['vs/editor/editor.main'], function() {
            if (document.getElementById('code-editor')) {
              initializeMonacoEditor();
            }
          });
        } else {
          setTimeout(loadMonacoEditor, 50); // Retry if RequireJS is not yet loaded
        }
      }

      function setupButtons() {
        const saveButton = document.getElementById('save-file');
        if (saveButton) {
          saveButton.addEventListener('click', () => {
            const form = document.getElementById('edit-file-form');
            const hiddenField = form.querySelector('#file-content');
            if (monacoEditor) {
              hiddenField.value = monacoEditor.getValue();
            }
            form.submit();
          });
        }

        const runButton = document.getElementById('run-code');
        if (runButton) {
          runButton.addEventListener('click', () => {
            if (monacoEditor) {
              const code = monacoEditor.getValue();
              const language = 'python'; // Cambia il linguaggio se necessario

              // Chiamata AJAX per eseguire il codice (implementare nel backend)
              fetch('/run_code', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ code: code, language: language }) // Cambia il linguaggio se necessario
              })
              .then(response => response.json())
              .then(data => {
                // Mostra l'output del codice (implementare nel backend)
                document.getElementById('output').textContent = data.output;
              });
            }
          });
        }
      }

      document.addEventListener('DOMContentLoaded', () => {
        console.log('DOMContentLoaded event');
        setupButtons();
        loadMonacoEditor();
      });

      window.addEventListener('popstate', function(event) {
        console.log('popstate event');
        window.location.reload();
      });

      window.addEventListener('beforeunload', () => {
        console.log('beforeunload event');
        disposeMonacoEditor();
      });
    })();
  </script>
</body>
</html>
