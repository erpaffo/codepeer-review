# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'factory_bot_rails'
require 'capybara/rspec'

# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# You can allow Rails to rescue exceptions and display error pages like in production
# by tagging your scenario (or feature) with @allow-rescue.
ActionController::Base.allow_rescue = false

# Set up DatabaseCleaner to manage database state between tests
DatabaseCleaner.strategy = :transaction

Before do |scenario|
  if scenario.source_tag_names.include?('@javascript')
    DatabaseCleaner.strategy = :truncation
  else
    DatabaseCleaner.strategy = :transaction
  end
end

# Start DatabaseCleaner before each scenario
Before do
  DatabaseCleaner.start
end

# Clean database after each scenario
After do
  DatabaseCleaner.clean
end

World(FactoryBot::Syntax::Methods)

# Set the default driver for JavaScript-enabled tests to headless Chrome
Capybara.javascript_driver = :selenium_chrome_headless

# Configure Capybara to use the Selenium driver for JavaScript tests
Capybara.configure do |config|
  config.default_max_wait_time = 5 # seconds
end

# Ensure that scenarios tagged with @javascript use the truncation strategy
Cucumber::Rails::Database.javascript_strategy = :truncation
